from confluent_kafka import Consumer, KafkaError

# Kafka configuration
kafka_bootstrap_servers = 'pkc-p11xm.us-east-1.aws.confluent.cloud:9092'
kafka_group_id = 'group4'
kafka_topic = 'class_demo'

# Create consumer configuration
consumer_config = {
    'bootstrap.servers': kafka_bootstrap_servers,
    'group.id': kafka_group_id,
    'auto.offset.reset': 'earliest'  # You can set it to 'latest' or 'none' depending on your use case
}

# Create Kafka consumer
consumer = Consumer(consumer_config)

# Subscribe to the topic
consumer.subscribe([kafka_topic])

try:
    while True:
        # Poll for messages
        msg = consumer.poll(timeout=1000)  # Adjust the timeout as needed

        if msg is None:
            continue
        if msg.error():
            if msg.error().code() == KafkaError._PARTITION_EOF:
                # End of partition event
                print(f"Reached end of partition {msg.partition()}, offset {msg.offset()}")
            else:
                print(f"Error: {msg.error()}")
        else:
            # Process the message
            print(f"Received message: {msg.value().decode('utf-8')}")

except KeyboardInterrupt:
    pass
finally:
    # Close down consumer to commit final offsets.
    consumer.close()